name: Build and Release NotebookTerminalApp

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Versão da ferramenta. Ex: v1.2.3"
        required: true

permissions:
  contents: write

jobs:
  build:
    name: Build NotebookTerminalApp
    runs-on: macos-latest
    outputs:
      VERSION: ${{ steps.set_version.outputs.VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git to use token for private deps
        run: |
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Define version
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # remove o prefixo 'refs/tags/' da ref para obter só 'v1.2.3'
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "VERSION=$TAG_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Show version
        run: |
          echo "Versão usada: ${{ steps.set_version.outputs.VERSION }}"

      - name: Change version.txt
        run: echo "${{ steps.set_version.outputs.VERSION }}" > Sources/NotebookTerminalApp/version.txt

      - name: Import developer id installer certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.DEVELOPER_ID_INSTALLER_KEY }}
          p12-password: ${{ secrets.INSTALLER_P12_PASSWORD }}
          keychain: build
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Import developer id application certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.DEVELOPER_ID_APPLICATION_KEY }}
          p12-password: ${{ secrets.APPLICATION_P12_PASSWORD }}
          create-keychain: false
          keychain: build
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Verify certificates on Keychain
        run: |     
          # Verify certificates on Keychain
          security find-identity -v -p basic

      - name: Build the project
        run: |
          swift build -c release
          mkdir -p pkgroot/usr/local/bin pkgroot/usr/local/lib
          cp .build/release/NotebookTerminalApp pkgroot/usr/local/bin/
          cp .build/release/libRealmSwift.dylib pkgroot/usr/local/lib/
          cp -r .build/release/NotebookTerminalApp_NotebookTerminalApp.bundle pkgroot/usr/local/bin/

      - name: Configure .dylib dependency
        run: |
          install_name_tool \
            -id /usr/local/lib/libRealmSwift.dylib \
            pkgroot/usr/local/lib/libRealmSwift.dylib

          install_name_tool \
            -add_rpath /usr/local/lib \
            pkgroot/usr/local/bin/NotebookTerminalApp

      - name: Sign all required files
        run: |
          codesign \
            --force \
            --options runtime \
            --timestamp \
            --sign "${{ secrets.DEVELOPER_ID_APPLICATION_NAME }}" \
            pkgroot/usr/local/bin/NotebookTerminalApp

          codesign \
            --force \
            --options runtime \
            --timestamp \
            --sign "${{ secrets.DEVELOPER_ID_APPLICATION_NAME }}" \
            pkgroot/usr/local/lib/libRealmSwift.dylib

      - name: Create .pkg installer
        run: |
          pkgbuild \
            --root pkgroot \
            --install-location / \
            --identifier "${{ secrets.BUNDLE_ID }}" \
            --version "${{ steps.set_version.outputs.VERSION }}" \
            --sign "${{ secrets.DEVELOPER_ID_INSTALLER_NAME }}" \
            "NotebookTerminalApp-${{ steps.set_version.outputs.VERSION }}.pkg"

      - name: Verify Signature
        run: |
          pkgutil --check-signature "NotebookTerminalApp-${{ steps.set_version.outputs.VERSION }}.pkg"

      - name: Notarize .pkg installer
        run: |
          xcrun notarytool store-credentials "notarytool-profile" \
            --apple-id "${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}" \
            --password "${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}" \
            --team-id "${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}"

          output=$(xcrun notarytool submit "NotebookTerminalApp-${{ steps.set_version.outputs.VERSION }}.pkg" --keychain-profile "notarytool-profile" --wait)
          echo $output

          extracted_id=$(echo "$output" | awk '/status: Invalid/ {getline; if ($1 == "id:") print $2}')

          if [ -n "$extracted_id" ]; then
            echo "ID: $extracted_id"
            xcrun notarytool log $extracted_id --keychain-profile "notarytool-profile"
            exit 1
          else
            # Staple the notarization
            xcrun stapler staple "NotebookTerminalApp-${{ steps.set_version.outputs.VERSION }}.pkg"
          fi

      - name: Verify Notarization
        run: |
          spctl --assess -vv --type install "NotebookTerminalApp-${{ steps.set_version.outputs.VERSION }}.pkg"

      - name: Create New Tag
        run: git tag -a ${{ steps.set_version.outputs.VERSION }} -m "Release ${{ steps.set_version.outputs.VERSION }}"

      - name: Push New Tag
        run: git push --tags

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: NotebookTerminalApp
          path: |
            NotebookTerminalApp-${{ steps.set_version.outputs.VERSION }}.pkg

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: NotebookTerminalApp

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            NotebookTerminalApp
            NotebookTerminalApp-${{ needs.build.outputs.VERSION }}.pkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
